################################################################################
PREFIX  = '/video/bittorrent'
VERSION = '1.1.3'

HTTP_PORT = 8042

POPCORN_API = 'https://movies-v2.api-fetch.website'
HEADERS     = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

################################################################################
def fill_movie_object(movie_object, json_data):
    movie_object.title                   = json_data['title']
    movie_object.year                    = int(json_data['year'])
    movie_object.summary                 = json_data['synopsis']
    movie_object.duration                = int(json_data['runtime']) * 60 * 60 * 1000
    movie_object.rating                  = float(json_data['rating']['percentage'])
    movie_object.originally_available_at = Datetime.FromTimestamp(json_data['released'])
    movie_object.content_rating          = json_data['certification']
    movie_object.thumb                   = json_data['images']['poster']
    movie_object.art                     = json_data['images']['fanart']

    for genre in json_data['genres']:
        movie_object.genres.add(genre)

################################################################################
def fix_movie_torrent_title(json_data, key, magnet_data):
    return '{0} ({1}) - {2} - {3}'.format(json_data['title'], json_data['year'], key, magnet_data['provider'])

################################################################################
def fix_episode_torrent_title(show_data, episode_data, key, magnet_data):
    result = '{0} - S{1:02d}E{2:02d}'.format(show_data['title'], episode_data['season'], episode_data['episode'])
    if key != '0':
        result += ' - {0}'.format(key)
    result += ' - {0}'.format(magnet_data['provider'])
    return result

################################################################################
def fill_show_object(show_object, json_data):
    show_object.title                   = json_data['title']
    # show_object.summary                 = json_data['overview']
    # show_object.studio                  = json_data['studio']
    # show_object.duration                = json_data['runtime']
    # show_object.rating                  = float(json_data['rating'])
    # show_object.originally_available_at = Datetime.FromTimestamp(json_data['first_aired'])
    # show_object.content_rating          = json_data['certification']
    show_object.thumb                   = json_data['images']['poster']
    show_object.art                     = json_data['images']['fanart']

    # for genre in json_data['genres']:
    #     show_object.genres.add(genre)

################################################################################
def fill_episode_object(episode_object, json_item, json_data):
    # episode_object.show                    = json_data['title']
    episode_object.season                  = json_item['season']
    episode_object.index                   = json_item['episode']
    episode_object.title                   = json_item['title']
    episode_object.summary                 = json_item['overview']
    # episode_object.rating                  = float(json_data['rating'])
    episode_object.originally_available_at = Datetime.FromTimestamp(json_item['first_aired'])
    episode_object.thumb                   = json_data['images']['poster']
    episode_object.art                     = json_data['images']['fanart']

################################################################################
def fill_youtube_video_object(video_object):
    url = video_object.url
    thumb = 'https://i.ytimg.com/vi/%s/hqdefault.jpg' % youtube_video_url(url)
    video_object.thumb = thumb
    video_object.art = thumb

def youtube_video_url(url):
    return url.split("?v=",1)[1]
